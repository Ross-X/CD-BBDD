------------------- 1.Devuelve todas las películas ------------------------  

SELECT * FROM MOVIES 

------------------- 2. Devuelve todos los géneros existentes ------------------------ 

SELECT * FROM GENRES 

------------------- 3. Devuelve la lista de todos los estudios de grabación que estén activos -------------------- 


SELECT * FROM STUDIOS WHERE STUDIO_ACTIVE !=0 

SELECT * FROM STUDIOS WHERE STUDIO_IS TRUE 

------------------- 4. Devuelve una lista de los 20 últimos miembros en anotarse al videoclub 

SELECT 
	* 
FROM 
	MEMBERS 
ORDER BY 
	MEMBER_DISCHARGE_DATE DESC 
LIMIT 20 

------------------- 5. Devuelve las 20 duraciones de películas más frecuentes, ordenados de mayor a menor. 
 

SELECT 
	MOVIE_DURATION, 
	COUNT(*) AS FREQUENCY 
FROM 
	MOVIES 
GROUP BY 
	MOVIE_DURATION 
ORDER BY 
	FRECUENCIA DESC 
LIMIT 20 

------------------- 6. Devuelve las películas del año 2000 en adelante que empiecen por la letra A. 

 
SELECT * 
FROM 
	MOVIES 
WHERE 
	MOVIE_LAUNCH_DATE LIKE '20%' 
AND 
	MOVIE_NAME LIKE 'A%' 

SELECT * 
FROM 
	MOVIES 
WHERE 
	YEAR(MOVIE_LAUNCH_DATE)>=2000 
AND 
	UPPER(MOVIE_NAME) LIKE 'A%' 

 
------------------- 7. Devuelve los actores nacidos un mes de Junio 


SELECT * 
FROM 
	ACTORS 
WHERE 
	ACTOR_BIRTH_DATE LIKE '%-06-%' 

SELECT * 
FROM 
	ACTORS 
WHERE 
	MONTH(ACTOR_BIRTH_DATE) = 6; 


------------------- 8. Devuelve los actores nacidos cualquier mes que no sea Junio y que sigan vivos. 
 

SELECT * 
FROM 
	ACTORS 
WHERE 
	MONTH(ACTOR_BIRTH_DATE) <> 6 
AND 
	ACTOR_DEAD_DATE IS NULL ; 


------------------- 9. Devuelve el nombre y la edad de todos los directores menores o iguales de 50 años que estén vivos 

SELECT 
	DIRECTOR_NAME, 
	DATEDIFF(YEAR, 
	DIRECTOR_BIRTH_DATE, NOW()) AS AGE 
FROM 
	DIRECTORS  
WHERE 
	DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, NOW()) <= 50  
AND 
	DIRECTOR_DEAD_DATE IS NULL; 

------------------- 10. Devuelve el nombre y la edad de todos los actores menores de 50 años que hayan fallecido 

 

SELECT 
	DIRECTOR_NAME, 
	DATEDIFF(YEAR, ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE) AS AGE  
FROM 
	ACTORS 
WHERE 
	DATEDIFF(YEAR, ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE) <= 50 
AND 
	ACTOR_DEAD_DATE IS NOT NULL; 

------------------- 11. Devuelve el nombre de todos los directores menores o iguales de 40 años que estén vivos 

 

SELECT 
	DIRECTOR_NAME 
FROM 
	DIRECTORS  
WHERE 
	DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, NOW()) <= 40  
AND 
	DIRECTOR_DEAD_DATE IS  NULL; 

------------------- 12. Indica la edad media de los directores vivos 

 

SELECT 
	AVG(DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, CURRENT_DATE)) AS Middle_Ages 
FROM 
	DIRECTORS 
WHERE 
	DIRECTOR_DEAD_DATE IS NULL; 
 
------------------- 13. Indica la edad media de los actores que han fallecido 

SELECT  
	AVG(DATEDIFF(YEAR, ACTOR_BIRTH_DATE, CURRENT_DATE)) AS Middle_Ages  
FROM  
	ACTORS 
WHERE  
	ACTOR_DEAD_DATE IS NOT NULL; 
 
------------------- 14. Devuelve el nombre de todas las películas y el nombre del estudio que las ha realizado 

SELECT 
	MOVIE_NAME,STUDIO_NAME 
FROM 
	MOVIES M 
INNER JOIN 
	STUDIOS S 
ON 
	M.STUDIO_ID=S.STUDIO_ID 

------------------- 15. Devuelve los miembros que alquilaron al menos una película entre el año 2010 y el 2015 

SELECT 
	DISTINMEMBER_NAME  
FROM  
	MEMBERS M  
INNER JOIN  
	MEMBERS_MOVIE_RENTAL MR  
ON  
	M.MEMBER_ID=MR.MEMBER_ID  
WHERE  
	YEAR(MR.MEMBER_RENTAL_DATE) BETWEEN 2010 AND 2015  

SELECT 
	DISTINCT(MEMBER_NAME) 
FROM 
	MEMBERS M 
INNER JOIN 
	MEMBERS_MOVIE_RENTAL MR 
ON 
	M.MEMBER_ID=MR.MEMBER_ID 
WHERE 
	YEAR(MR.MEMBER_RENTAL_DATE)>=2010 
AND 
	YEAR(MR.MEMBER_RENTAL_DATE)<= 2015 

------------------- 16. Devuelve cuantas películas hay de cada país 

SELECT  
	NATIONALITY_NAME,COUNT(*) AS FILMS 
FROM 
	MOVIES M  
INNER JOIN 
	NATIONALITIES N  
ON 
	M.NATIONALITY_ID = N.NATIONALITY_ID  
GROUP BY
	N.NATIONALITY_NAME; 

SELECT 
	n.NATIONALITY_NAME AS COUNTRY, 
	COUNT(m.MOVIE_ID) AS MOVIES 
FROM 
	NATIONALITIES n 
LEFT JOIN MOVIES m ON 
	n.NATIONALITY_ID = m.NATIONALITY_ID 
GROUP BY 
	n.NATIONALITY_NAME 
ORDER BY  
	COUNT(m.MOVIE_ID)  
DESC; 

 
------------------- 17. Devuelve todas las películas que hay de género documental 

SELECT  
	MOVIE_NAME  
FROM  
	MOVIES M  
INNER JOIN  
	GENRES G  
ON  
	M.GENRE_ID = G.GENRE_ID  
WHERE  
	G.GENRE_NAME LIKE 'Documentary' 

 

SELECT 
	*  
FROM  
	MOVIES 
WHERE  
	GENRES_ID LIKE  
( 
SELECT  
	GENRED_ID  
FROM  
	GENRES  
WHERE  
	GENRE_NAME = 'Documentary' 
) 

 
-------------------  18. Devuelve todas las películas creadas por directores nacidos a partir de 1980 y que todavía están vivos 

 

SELECT  
	*  
FROM  
	MOVIES M  
INNER JOIN  
	DIRECTORS D  
ON  
	M.DIRECTOR_ID=D.DIRECTOR_ID  
WHERE  
	YEAR(D.DIRECTOR_BIRTH_DATE)>=1980 AND 
DIRECTOR_DEAD_DATE IS NULL 

 
-------------------   19. Indica si hay alguna coincidencia de nacimiento de ciudad (y si las hay, indicarlas) entre los miembros del videoclub y los directores. 

SELECT 
    M.MEMBER_NAME, 
    D.DIRECTOR_NAME, 
    D.DIRECTOR_BIRTH_PLACE 
FROM 
    MEMBERS M 
INNER JOIN DIRECTORS D ON 
    M.MEMBER_TOWN = D.DIRECTOR_BIRTH_PLACE 

-------------------   20. Devuelve el nombre y el año de todas las películas que han sido producidas por un estudio que actualmente no esté activo 
 
SELECT  
	MOVIE_NAME,MOVIE_LAUNCH_DATE  
FROM  
	MOVIES M  
INNER JOIN  
	STUDIOS S  
ON  
	M.STUDIO_ID=S.STUDIO_ID  
WHERE  
	S.STUDIO_ACTIVE IS FALSE 

 
------------------- 21. Devuelve una lista de las últimas 10 películas que se han alquilado 
 
SELECT  
	M.MOVIE_NAME  
FROM  
	MOVIES M  
INNER JOIN  
	MEMBERS_MOVIE_RENTAL MR  
ON  
	M.MOVIE_ID=MR.MOVIE_ID  
ORDER BY  
	MR.MEMBER_RENTAL_DATE DESC  
LIMIT 10 

-------------------  22. Indica cuántas películas ha realizado cada director antes de cumplir 41 años 

SELECT  
	D.DIRECTOR_NAME,COUNT(MOVIE_ID) AS MOVIE_COUNT FROM  
	DIRECTORS AS D  
INNER JOIN  
	MOVIES M ON D.DIRECTOR_ID=M.DIRECTOR_ID  
WHERE  
	DATEDIFF(YEAR,DIRECTOR_BIRTH_DATE,MOVE_LAUNCH_DATE)<41 
GROUP BY  
	D.DIRECTOR_NAME 
 
------------------- 23. Indica cuál es la media de duración de las películas de cada director 

SELECT  
	DIRECTOR_NAME,AVG(MOVIE_DURATION) AS TOTAL_DURATION  
FROM  
	DIRECTORS D  
INNER JOIN  
	MOVIES M  
ON  
	D.DIRECTOR_ID=M.DIRECTOR_ID  
GROUP BY  
	D.DIRECTOR_NAME 

------------------- 24. Indica cuál es el nombre y la duración mínima de la película que ha sido alquilada en los últimos 2 años por los miembros del videoclub (La "fecha de ejecución" en este script es el 25-01-2019) 

 
SELECT  
	MOVIE_NAME,MOVIE_DURATION AS MIN_DURATION  

FROM  
	MOVIES M  
INNER JOIN  
	MEMBERS_MOVIE_RENTAL MR  
ON  
	M.MOVIE_ID=MR.MOVIE_ID  
WHERE  
	MEMBER_RENTAL_DATE  
BETWEEN  
	'2017-01-25' AND '2019-01-25'  
ORDER BY  
	MOVIE_DURATION  
LIMIT 1 

---

SELECT 
	MOVIE_NAME,MOVIE_DURATION AS MIN_DURATION 
FROM 
	MOVIES M
INNER JOIN 
	MEMBERS_MOVIE_RENTAL MR 
ON 
	M.MOVIE_ID=MR.MOVIE_ID 
WHERE 
	DATEADD('YEAR', -2, DATE '2019-01-25')<MR.MEMBER_RENTAL_DATE
ORDER BY 
	MOVIE_DURATION 
LIMIT 1 
 
------------------- 25. Indica el número de películas que hayan hecho los directores durante las décadas de los 60, 70 y 80 que contengan la palabra "The" en cualquier parte del título 


SELECT  
	DIRECTOR_NAME,COUNT(MOVIE_ID) AS TOTAL_FILMS  
FROM  
	DIRECTORS D  
INNER JOIN  
	MOVIES M  
ON  
	D.DIRECTOR_ID=M.DIRECTOR_ID  
WHERE  
	(YEAR(MOVIE_LAUNCH_DATE)  
BETWEEN 1960 AND 1989)  
AND  
	UPPER(MOVIE_NAME) LIKE '%THE%'  
GROUP BY  
	DIRECTOR_NAME 

SELECT  
	DIRECTOR_NAME,COUNT(MOVIE_ID) AS TOTAL_FILMS  
FROM  
	DIRECTORS D  
INNER JOIN  
	MOVIES M  
ON  
	D.DIRECTOR_ID=M.DIRECTOR_ID  
WHERE  
	M.MOVIE_LAUNCH_DATE >= DATE '1960-01-01'  
AND  
	M.MOVIE_LAUNCH_DATE <= DATE '1989-12-31' 
AND  
	UPPER(MOVIE_NAME) LIKE '%THE%'  
GROUP BY  
	DIRECTOR_NAME 

------------------- 26. Lista nombre, nacionalidad y director de todas las películas 

SELECT  
	M.MOVIE_NAME, 
	N.NATIONALITY_NAME, 
	D.DIRECTOR_NAME  
FROM  
	MOVIES M  
INNER JOIN  
	NATIONALITIES N  
ON  
	M.NATIONALITY_ID=N.NATIONALITY_ID  
INNER JOIN  
	DIRECTORS D  
ON  
	M.DIRECTOR_ID=D.DIRECTOR_ID 

------------------- 27. Muestra las películas con los actores que han participado en cada una de ellas 

SELECT  
	ACTOR_NAME,MOVIE_NAME 
FROM  
	ACTORS A  
INNER JOIN 
	MOVIES_ACTORS MA 
ON 
	A.ACTOR_ID = MA.ACTOR_ID  
INNER JOIN  
	MOVIES M 
ON 
	M.MOVIE_ID =MA.MOVIE_ID 

------------------- 28. Indica cual es el nombre del director del que más películas se han alquilado 

SELECT  
	D.DIRECTOR_NAME,COUNT(MR.MEMBER_MOVIE_RENTAL_ID) AS RENTED_MOVIES  
FROM  
	MOVIES M  
INNER JOIN  
	PUBLIC.MEMBERS_MOVIE_RENTAL MR  
ON  
	M.MOVIE_ID=MR.MOVIE_ID  
INNER JOIN  
	DIRECTORS D  
ON  
	M.DIRECTOR_ID = D.DIRECTOR_ID  
GROUP BY  
	DIRECTOR_NAME  
ORDER BY  
	RENTED_MOVIES DESC  
LIMIT 1 

------------------- 29. Indica cuantos premios han ganado cada uno de los estudios con las películas que han creado 

SELECT  
	S.STUDIO_NAME, SUM(A.AWARD_WIN) AS AWARD_WIN 
FROM 
	STUDIOS S 
INNER JOIN 
	MOVIES M 
ON  
	S.STUDIO_ID =M.STUDIO_ID  
INNER JOIN  
	PUBLIC.AWARDS A 
ON 
	M.MOVIE_ID =A.MOVIE_ID  
GROUP BY  
	S.STUDIO_NAME 

------------------- 30. Indica el número de premios a los que estuvo nominado un actor, pero que no ha conseguido (Si una película está nominada a un premio, su actor también lo está) 

SELECT  
	A.ACTOR_NAME,SUM(AW.AWARD_ALMOST_WIN) AS NOMINATIONS  
FROM  
	ACTORS A  
INNER JOIN  
	PUBLIC.MOVIES_ACTORS MA 
ON 
	A.ACTOR_ID =MA.ACTOR_ID  
INNER JOIN 	 
	MOVIES M 
ON 
	M.MOVIE_ID =MA.MOVIE_ID  
INNER JOIN  
	AWARDS AW 
ON 
	AW.MOVIE_ID =M.MOVIE_ID  
GROUP BY 
	A.ACTOR_NAME; 

------------------- 31. Indica cuantos actores y directores hicieron películas para los estudios no activos 


SELECT 
	COUNT(DISTINCT D.DIRECTOR_ID) AS TOTAL_DIRECTORS,COUNT(DISTINCT A.ACTOR_ID) AS TOTAL_ACTORS 
FROM 
	STUDIOS S  
INNER JOIN 
	MOVIES M 
ON 
	M.STUDIO_ID =S.STUDIO_ID 
INNER JOIN  
	DIRECTORS D 
ON 
	D.DIRECTOR_ID=M.DIRECTOR_ID  
INNER JOIN  
	MOVIES_ACTORS MA 
ON 
	MA.MOVIE_ID=M.MOVIE_ID  
INNER JOIN  
	ACTORS A 
ON 
	A.ACTOR_ID=MA.ACTOR_ID  
WHERE 
	S.STUDIO_ACTIVE IS FALSE 

------------------- 32. Indica el nombre, ciudad, y teléfono de todos los miembros del videoclub que hayan alquilado películas que hayan sido nominadas a más de 150 premios y ganaran menos de 50 

SELECT  
	DISTINCT(M.MEMBER_NAME) , 
	M.MEMBER_TOWN , 
	M.MEMBER_PHONE  
FROM  
	PUBLIC.MEMBERS M 
INNER JOIN  
	PUBLIC.MEMBERS_MOVIE_RENTAL  MMR 
ON 
	M.MEMBER_ID = MMR.MEMBER_ID 
INNER JOIN  
	PUBLIC.MOVIES MO 
ON 
	MMR.MOVIE_ID = MO.MOVIE_ID 
INNER JOIN  
	PUBLIC.AWARDS A 
ON 
	MO.MOVIE_ID = A.MOVIE_ID 
WHERE  
	A.AWARD_NOMINATION > 150 AND A.AWARD_WIN < 50; 

-------------------  33. Comprueba si hay errores en la BD entre las películas y directores (un director fallecido en el 76 no puede dirigir una película en el 88) 

SELECT 
    D.DIRECTOR_NAME,D.DIRECTOR_DEAD_DATE,M.MOVIE_NAME,M.MOVIE_LAUNCH_DATE 
FROM 
    PUBLIC.DIRECTORS AS D
INNER JOIN
	MOVIES M
ON
	D.DIRECTOR_ID =M.DIRECTOR_ID 
WHERE 	
	D.DIRECTOR_DEAD_DATE <= M.MOVIE_LAUNCH_DATE AND
	DIRECTOR_DEAD_DATE IS NOT NULL 


SELECT 
    D.DIRECTOR_NAME,D.DIRECTOR_DEAD_DATE,MIN(M.MOVIE_LAUNCH_DATE)
FROM 
    PUBLIC.DIRECTORS D
INNER JOIN
	MOVIES M
ON
	D.DIRECTOR_ID =M.DIRECTOR_ID 
WHERE 	
	D.DIRECTOR_DEAD_DATE <= M.MOVIE_LAUNCH_DATE AND
	DIRECTOR_DEAD_DATE IS NOT NULL
GROUP BY 
	D.DIRECTOR_NAME,D.DIRECTOR_DEAD_DATE 

------------------- 34. Utilizando la información de la sentencia anterior, modifica la fecha de defunción a un año más tarde del estreno de la película (mediante sentencia SQL) 

--UPDATE DIRECTORS d SET DIRECTOR_DEAD_DATE = '1995-05-04' WHERE d.DIRECTOR_ID = 27;
--UPDATE DIRECTORS d SET DIRECTOR_DEAD_DATE = '2001-04-08' WHERE d.DIRECTOR_ID = 47;
	
UPDATE 
	DIRECTORS
SET
	DIRECTOR_DEAD_DATE = 
	(
	SELECT
		DATEADD(YEAR ,
		1,
		MAX(M.MOVIE_LAUNCH_DATE)) AS LAST_MOVIE
	FROM
		MOVIES M
	INNER JOIN
		DIRECTORS D
	ON
		M.DIRECTOR_ID = D.DIRECTOR_ID
	WHERE
		D.DIRECTOR_DEAD_DATE <= M.MOVIE_LAUNCH_DATE
		AND
	DIRECTOR_DEAD_DATE IS NOT NULL
		AND D.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID
	GROUP BY
		D.DIRECTOR_NAME,
		D.DIRECTOR_DEAD_DATE 
		
	)
WHERE 
	DIRECTOR_ID IN (
	SELECT 
		DISTINCT D.DIRECTOR_ID
	FROM
		PUBLIC.DIRECTORS D
	INNER JOIN
		MOVIES  M
	ON
		D.DIRECTOR_ID = M.DIRECTOR_ID
	WHERE 	
		D.DIRECTOR_DEAD_DATE <= M.MOVIE_LAUNCH_DATE
		AND
		DIRECTOR_DEAD_DATE IS NOT NULL
		)

MERGE
INTO
	PUBLIC.DIRECTORS D
		USING (
	SELECT
		DIRECTOR_ID,
		DATEADD(YEAR,
		1 ,
		MAX(M.MOVIE_LAUNCH_DATE)) AS DIRECTOR_DEAD_DATE
	FROM
		PUBLIC.DIRECTORS D
	INNER JOIN PUBLIC.MOVIES M ON
		D.DIRECTOR_ID = M.DIRECTOR_ID
	WHERE
		D.DIRECTOR_DEAD_DATE IS NOT NULL
		AND M.MOVIE_LAUNCH_DATE > D.DIRECTOR_DEAD_DATE
	GROUP BY
		D.DIRECTOR_ID 
		) TOTAL (DIRECTOR_ID,
	DIRECTOR_DEAD_DATE) ON
	D.DIRECTOR_ID = TOTAL.DIRECTOR_ID
	WHEN MATCHED THEN
UPDATE
SET
	D.DIRECTOR_DEAD_DATE = TOTAL.DIRECTOR_DEAD_DATE
	
	
------------------- 35. Indica cuál es el género favorito de cada uno de los directores cuando dirigen una película 

SELECT
	GROUPID.DIRECTOR_NAME,
	GROUP_CONCAT(GROUPID.GENRE_NAME) AS GENRE_NAME
FROM
	(
	SELECT
		COUNT(G.GENRE_NAME) AS NUM_MOVIES,
		D.DIRECTOR_ID,
		D.DIRECTOR_NAME,
		G.GENRE_ID,
		G.GENRE_NAME
	FROM
		MOVIES M
	INNER JOIN GENRES AS G ON
		M.GENRE_ID = G.GENRE_ID
	INNER JOIN DIRECTORS D ON
		M.DIRECTOR_ID = D.DIRECTOR_ID
	GROUP BY
		G.GENRE_ID,
		D.DIRECTOR_ID
	ORDER BY
		D.DIRECTOR_ID) GROUPID
INNER JOIN (
	SELECT
		DIRECTOR_ID,
		MAX(NUM_MOVIES) NUM_MOVIES
	FROM
		(
		SELECT
			COUNT(G.GENRE_NAME) AS NUM_MOVIES,
			D.DIRECTOR_ID,
			D.DIRECTOR_NAME,
			G.GENRE_ID,
			G.GENRE_NAME
		FROM
			MOVIES M
		INNER JOIN GENRES AS G ON
			M.GENRE_ID = G.GENRE_ID
		INNER JOIN DIRECTORS D ON
			M.DIRECTOR_ID = D.DIRECTOR_ID
		GROUP BY
			G.GENRE_ID,
			D.DIRECTOR_ID
		ORDER BY
			D.DIRECTOR_ID)
	GROUP BY
		DIRECTOR_ID) MAXVAL ON
	GROUPID.DIRECTOR_ID = MAXVAL.DIRECTOR_ID
	AND GROUPID.NUM_MOVIES = MAXVAL.NUM_MOVIES
GROUP BY
	GROUPID.DIRECTOR_NAME

------------------- 36. Indica cuál es la nacionalidad favorita de cada uno de los estudios en la producción de las películas 

SELECT
	GROUPID.STUDIO_NAME,
	GROUP_CONCAT(GROUPID.NATIONALITY_NAME) AS NAT_NAME
FROM
	(
	SELECT
		COUNT(N.NATIONALITY_NAME) AS NUM_NAT,
		S.STUDIO_ID,
		S.STUDIO_NAME,
		N.NATIONALITY_ID,
		N.NATIONALITY_NAME
	FROM
		MOVIES MV
	INNER JOIN PUBLIC.NATIONALITIES AS N ON
		MV.NATIONALITY_ID = N.NATIONALITY_ID
	INNER JOIN PUBLIC.STUDIOS S ON
		MV.STUDIO_ID = S.STUDIO_ID
	GROUP BY
		N.NATIONALITY_ID,
		S.STUDIO_ID
	ORDER BY
		S.STUDIO_ID) GROUPID
INNER JOIN(
	SELECT
		STUDIO_ID,
		MAX(NUM_NAT) NUM_NAT
	FROM
		(
		SELECT
			COUNT(N.NATIONALITY_NAME) AS NUM_NAT,
			S.STUDIO_ID,
			S.STUDIO_NAME,
			N.NATIONALITY_ID,
			N.NATIONALITY_NAME
		FROM
			MOVIES MV
		INNER JOIN PUBLIC.NATIONALITIES AS N ON
			MV.NATIONALITY_ID = N.NATIONALITY_ID
		INNER JOIN PUBLIC.STUDIOS S ON
			MV.STUDIO_ID = S.STUDIO_ID
		GROUP BY
			N.NATIONALITY_ID,
			S.STUDIO_ID
		ORDER BY
			S.STUDIO_ID)
	GROUP BY
		STUDIO_ID
)MAXVAL ON
	GROUPID.STUDIO_ID = MAXVAL.STUDIO_ID
	AND GROUPID.NUM_NAT = MAXVAL.NUM_NAT
GROUP BY
	GROUPID.STUDIO_NAME
-------------------  37. Indica cuál fue la primera película que alquilaron los miembros del videoclub cuyos teléfonos tengan como último dígito el ID de alguna nacionalidad 

SELECT
	MB.MEMBER_NAME,
	MB.MEMBER_PHONE,
	MV.MOVIE_NAME
FROM
	PUBLIC.MEMBERS MB
INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL MMR
ON
	MB.MEMBER_ID = MMR.MEMBER_ID
INNER JOIN MOVIES MV
ON
	MV.MOVIE_ID = MMR.MOVIE_ID
INNER JOIN PUBLIC.NATIONALITIES N
ON
	RIGHT(MB.MEMBER_PHONE,
	1) = N.NATIONALITY_ID
WHERE
	MMR.MEMBER_RENTAL_DATE = (
	SELECT
		MIN(MEMBER_RENTAL_DATE)
	FROM
		PUBLIC.MEMBERS_MOVIE_RENTAL MMR
	WHERE
		MMR.MEMBER_ID = MB.MEMBER_ID
    )
GROUP BY
	MB.MEMBER_NAME,
	MB.MEMBER_PHONE,
	MV.MOVIE_NAME;

	